{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fswiss\fcharset0 ArialMT;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red53\green53\blue53;}
\margl1440\margr1440\vieww30900\viewh24840\viewkind0
\deftab720
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
// --------------------------------------------------------------------------------------------------------------
\f1 \cf0 \

\f0 \cf2 // -- NAME: 
\f2 \cf3 \kerning1\expnd0\expndtw0 hypbremailexample
\f0 \cf2 \expnd0\expndtw0\kerning0
.groovy
\f1 \cf0 \

\f0 \cf2 // --
\f1 \cf0 \

\f0 \cf2 // -- DESCRIPTION: Groovy script to send email notifications from Hyperion business rules
\f1 \cf0 \

\f0 \cf2 // --
\f1 \cf0 \

\f0 \cf2 // -- CREATED ON: January 12, 2018
\f1 \cf0 \

\f0 \cf2 // --
\f1 \cf0 \

\f0 \cf2 // --------------------------------------------------------------------------------------------------------------
\f1 \cf0 \
\

\f0 \cf2 // --------------------------------------------------------------------------------------------------------------
\f1 \cf0 \

\f0 \cf2 // -- MODIFICATION HISTORY
\f1 \cf0 \

\f0 \cf2 // --------------------------------------------------------------------------------------------------------------
\f1 \cf0 \

\f0 \cf2 //
\f1 \cf0 \

\f0 \cf2 // 2018-01-12: Original script created (Taha Siddiqui, EPM Advisors)
\f1 \cf0 \

\f0 \cf2 //\
//\

\f1 \cf0 \

\f0 \cf2 // External libraries
\f1 \cf0 \

\f0 \cf2 //
\f1 \cf0 \

\f0 \cf2 import java.util.Properties
\f1 \cf0 \

\f0 \cf2 import javax.mail.*
\f1 \cf0 \

\f0 \cf2 import javax.mail.internet.*
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Output to logger file
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 println("Script started successfully!");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Define constants for Pilot environment
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 String FROM = \'93sender@MyCompany.com\'94;\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0// Verified "From" address
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 String TO = \'93recipient@MyCompany.com";\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 // Verified "To" address
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 String SUBJECT = \'93Hyperion System Notification - Example\'94;\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 		// This is the email subject line
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Generate the Body of the email
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 String BODY = \'93HYPERON SYSTEM NOTIFICATION\'94;
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 BODY = BODY.concat("\\n===========================================================================================================================");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 BODY = BODY.concat("\\n\\n\\nThis is an example of an email created via a Groovy script.\'94);
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 BODY = BODY.concat("\\n\\nThis email was generated from a non-monitored email account - do not respond to this email!");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 BODY = BODY.concat("\\n\\nSincerely,");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 BODY = BODY.concat("\\nHyperion System Administrator.");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 BODY = BODY.concat("\\n\\n\\n===========================================================================================================================");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 BODY = BODY.concat("\\n\cf2 HYPERON SYSTEM NOTIFICATION\cf2 ");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Supply your SMTP credentials below. Note that your SMTP credentials are different from your AWS credentials.
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 String SMTP_USERNAME = \'93USER_NAME\'94;\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 // REPLACE with your SMTP username.
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 String SMTP_PASSWORD = \'93PASSWORD\'94;\'a0 					// REPLACE with your SMTP password.
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Amazon SES SMTP host name. This example uses the US West (Oregon) region.
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 String HOST = "smtp.MyCompany.com";\'a0					// REPLACE with your SMTP host name \'a0
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // The port you will connect to on the Amazon SES SMTP endpoint. We are choosing port 25 because we will use
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 // STARTTLS to encrypt the connection.
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 int PORT = 25;		// THIS MAY NEED TO BE CHANGED DEPENDING ON YOUR SMTP SERVER PORT
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Create a Properties object to contain connection configuration information.
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 Properties props = System.getProperties();
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 props.put("mail.transport.protocol", "smtp");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 props.put("mail.smtp.port", PORT);
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Set properties indicating that we want to use STARTTLS to encrypt the connection
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 // The SMTP session will begin on an unencrypted connection, and then the client
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 // will issue a STARTTLS command to upgrade to an encrypted connection
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 props.put("mail.smtp.auth", "true");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 props.put("mail.smtp.starttls.enable", "true");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 props.put("mail.smtp.starttls.required", "true");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Output to logger file
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 println("Attempting to create Session...");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Create a Session object to represent a mail session with the specified properties
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 Session session = Session.getDefaultInstance(props);
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Output to logger file
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 println("Session created successfully!");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Create a message with the specified information
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 MimeMessage msg = new MimeMessage(session);
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 msg.setFrom(new InternetAddress(FROM));
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 msg.setRecipient(Message.RecipientType.TO, new InternetAddress(TO));
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 msg.setSubject(SUBJECT);
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 msg.setContent(BODY,"text/plain");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Output to logger file
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 println("Message created successfully!");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Create a transport
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 Transport transport = session.getTransport();
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Output to logger file
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 println("Transport created successfully!");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 // Send the message
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 try
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0\{
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 // Output to logger file
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 println("Attempting to send an email through the Amazon SES SMTP interface...");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 // Connect to Amazon SES using the SMTP username and password you specified above.
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 transport.connect(HOST, SMTP_USERNAME, SMTP_PASSWORD);
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 // Output to logger file
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 println("Connected to Transport successfully!");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 // Send the email
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 transport.sendMessage(msg, msg.getAllRecipients());
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 println("Email sent!");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 return 0;
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \}
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 catch (Exception ex) \{
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 println("The email was not sent.");
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 println("Error message: " + ex.getMessage());
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0println("Exception Stack Trace: " + ex.getStackTrace());\'a0 \'a0 \'a0 \'a0
\f1 \cf0 \

\f0 \cf2 //println("Message detail: " + msg.getTo() + " " + msg.getFrom());
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 return -1;
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \}
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 finally
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \{
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 // Close and terminate the connection.
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 //
\f1 \cf0 \

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 transport.close();\'a0 \'a0 \'a0 \'a0 \'a0 \'a0
\f1 \cf0 \

\f0 \cf2 println("Script ended!");
\f1 \cf0 \
\

\f0 \cf2 \'a0 \'a0 \'a0 \'a0 \}
\f1 \cf0 \
}